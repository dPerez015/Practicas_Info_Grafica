#version 330 core
out vec4 color;
struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;


uniform vec3 lightColor;
uniform Material material;

uniform float appertureMax;
uniform float appertureMin;
uniform vec3 focusDir;

uniform vec3 lightPos;
uniform vec3 viewPos;


void main(){
	vec3 norm=normalize(Normal);
	vec3 lightDir= normalize(lightPos-FragPos);

	float theta=dot(lightDir,normalize(-focusDir));


	if(theta> appertureMax){
		//ambiental
		vec3 ambient = lightColor*vec3(texture(material.diffuse,TexCoord));

		//difusa
		vec3 diffuse=max(dot(norm,lightDir),0.0)*lightColor*vec3(texture(material.diffuse, TexCoord));

		//especular
		vec3 viewDir=normalize(viewPos-FragPos);
		vec3 reflectDir = reflect(-lightDir, norm);
		float spec=pow(max(dot(viewDir, reflectDir),0.0),material.shininess);
		vec3 specular=lightColor*vec3(texture(material.specular,TexCoord))*spec;

		float I=clamp((theta - appertureMax)/(appertureMin-appertureMax),0.0,1.0);

		vec3 result= ambient+((diffuse+specular)*I);

		color=vec4(I,I,I,1);
	
		}
		else{
		//color=vec4(lightColor*vec3(texture(material.diffuse,TexCoord)),1);
		}
}