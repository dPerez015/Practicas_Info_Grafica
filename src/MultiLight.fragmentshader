#version 330 core
out vec4 color;
struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
struct DirLight{
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight{
	vec3 position;

	vec3 atenConstant;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct FocalLight{
	vec3 position;

	float appertureMax;
	float appertureMin;

	vec3 focusDir;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

};

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;

uniform Material material;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 attenFact;

//luces
uniform int numPointLights;
uniform int numFocalLights;

uniform DirLight dirLight;
uniform PointLight pointLights[2];
uniform FocalLight focalLights[2];

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcFocalLight(FocalLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

///////////////////////MAIN///////////////////////////////////////////////////
void main(){
	vec3 norm=normalize(Normal);
	vec3 viewDir=normalize(viewPos - FragPos);

	vec3 result=CalcDirLight(dirLight, norm, viewDir);

	for(int i=0; i<numPointLights;i++){
	result+=CalcPointLight(pointLights[i], norm, FragPos, viewDir);
	}
	for(int i=0; i<numFocalLights;i++){
		result+=CalcFocalLight(focalLights[i], norm, FragPos, viewDir);
	}
	color=vec4(result,1);
}

///////////////////////////////FUNCIONES/////////////////////////////////////////



vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir){
	vec3 lightDir=normalize(-light.direction);
	//diffuse
	float diff=max(dot(normal, lightDir),0);
	//specular shading
	vec3 reflectDir=reflect(-lightDir, normal);
	float spec=pow(max(dot(viewDir, reflectDir),0.0),material.shininess);
	//combine results
	vec3 ambient= light.ambient * vec3(texture(material.diffuse, TexCoord));
	vec3 diffuse=light.diffuse * diff * vec3(texture(material.diffuse, TexCoord));
	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));

	return (ambient+diffuse+specular);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	vec3 lightDir=normalize(light.position-fragPos);
	//difuse
	float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0f / (light.atenConstant.x + light.atenConstant.y * distance + 
  			     light.atenConstant.z * (distance * distance));    
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoord));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoord));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoord));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}
vec3 CalcFocalLight(FocalLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	vec3 lightDir=normalize(light.position-fragPos);
	float theta=dot(lightDir,normalize(-light.focusDir));

	if(theta>light.appertureMax){
		//diffuse
		float diff=max(dot(normal,lightDir),0.0);
		//specular
		vec3 reflectDir=reflect(-lightDir, normal);
		float spec= pow(max(dot(viewDir, reflectDir),0),material.shininess);

		//attenuation
		float I=clamp((theta-light.appertureMax)/(light.appertureMin-light.appertureMax),0.0,1.0);

		//combinar
		vec3 ambient = light.ambient*vec3(texture(material.diffuse,TexCoord));
		vec3 diffuse = light.diffuse*diff*vec3(texture(material.diffuse,TexCoord));
		vec3 specular= light.specular * spec * vec3(texture(material.specular, TexCoord));

		diffuse*=I;
		specular*=I;
		return (ambient + diffuse + specular);
		//return vec3(I,I,I);
	}
	else{
		return light.ambient*vec3(texture(material.diffuse,TexCoord));
	}
}