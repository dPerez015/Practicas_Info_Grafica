#version 330 core
out vec4 color;
struct Material{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;

uniform vec3 lightColor;

uniform Material material;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 attenFact;



void main(){
	
	//ambiental
	vec3 ambient=lightColor*vec3(texture(material.diffuse,TexCoord));

	//difusa
	vec3 norm=normalize(Normal);
	vec3 lightDir= lightPos-FragPos;

	float distance=length(lightDir);

	lightDir=normalize(lightDir);
	float diff=max(dot(norm,lightDir),0.0);
	vec3 diffuse=lightColor*diff*vec3(texture(material.diffuse,TexCoord));
	

	//especular
	vec3 viewDir=normalize(viewPos-FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec=pow(max(dot(viewDir, reflectDir),0.0),material.shininess);
	vec3 specular=lightColor*vec3(texture(material.specular,TexCoord))*spec;


	vec3 result= ambient+diffuse+specular;

	float fatt=1/(attenFact.x+attenFact.y*distance+attenFact.z*distance*distance);
	
	color=vec4(fatt*result,1);
	//color=vec4(vec3(texture(diffuse,TexCoord)),1);
}